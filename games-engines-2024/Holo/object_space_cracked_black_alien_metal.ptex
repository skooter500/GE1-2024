{"name":"237","type":"graph","parameters":{},"node_position":{"x":0,"y":0},"label":"Graph","shortdesc":"","longdesc":"","nodes":[{"name":"Material","type":"material","parameters":{"albedo_color":{"type":"Color","r":1,"g":1,"b":1,"a":1},"metallic":1,"roughness":1,"emission_energy":1,"normal":1,"ao":1,"depth_scale":0.5,"flags_transparent":false,"sss":1,"size":11},"node_position":{"x":180,"y":140},"export_paths":{}},{"name":"tones_step","type":"tones_step","parameters":{"value":0.02,"width":0.05,"invert":true},"node_position":{"x":-2320,"y":-40}},{"name":"comment","type":"comment","parameters":{},"node_position":{"x":-3060,"y":-140},"title":"Comment","color":{"type":"Color","r":0.515625,"g":0.257813,"b":0,"a":1},"text":"Base brick outline\n","size":{"x":959.475952,"y":341.140442}},{"name":"gaussian_blur","type":"gaussian_blur","parameters":{"param0":11,"param1":3,"param2":0},"node_position":{"x":-1829.36731,"y":260.525909}},{"name":"normal_map","type":"normal_map","parameters":{"param2":0,"param0":12,"param1":1,"param4":1},"node_position":{"x":-760,"y":-120}},{"name":"invert","type":"invert","parameters":{},"node_position":{"x":-1880,"y":380}},{"name":"occlusion","type":"occlusion","parameters":{"param0":10,"param2":0},"node_position":{"x":-1023.122498,"y":266.491333}},{"name":"comment_3","type":"comment","parameters":{},"node_position":{"x":-1120,"y":180},"title":"Comment","color":{"type":"Color","r":0.03125,"g":0,"b":1,"a":1},"text":"AO from base outline","size":{"x":400,"y":208}},{"name":"blend","type":"blend","parameters":{"blend_type":2,"amount":1},"node_position":{"x":-1100,"y":-440}},{"name":"uniform","type":"uniform","parameters":{"color":{"type":"Color","r":0.054688,"g":1,"b":0,"a":1}},"node_position":{"x":-1240,"y":-376.858185}},{"name":"uniform_2","type":"uniform","parameters":{"color":{"type":"Color","r":0.20168,"g":0.20168,"b":0.20168,"a":1}},"node_position":{"x":-1440,"y":-1600}},{"name":"gaussian_blur_2","type":"gaussian_blur","parameters":{"param0":11,"param1":50,"param2":0},"node_position":{"x":-1000,"y":-1580}},{"name":"blend_2","type":"blend","parameters":{"blend_type":3,"amount":1},"node_position":{"x":-740,"y":-1520}},{"name":"comment_4","type":"comment","parameters":{},"node_position":{"x":-1260,"y":-480},"title":"Comment","color":{"type":"Color","r":0.671875,"g":0.038493,"b":0.632289,"a":1},"text":"Crack glow texture","size":{"x":630.058228,"y":238.0224}},{"name":"comment_5","type":"comment","parameters":{},"node_position":{"x":-1020,"y":-1660},"title":"Comment","color":{"type":"Color","r":0.432292,"g":0.267931,"b":0.360384,"a":1},"text":"Albedo Texture with crack glow, grain, and dust","size":{"x":767.874023,"y":404.784363}},{"name":"blend_3","type":"blend","parameters":{"blend_type":4,"amount":0.65},"node_position":{"x":-1300,"y":-740}},{"name":"comment_6","type":"comment","parameters":{},"node_position":{"x":-1920,"y":200},"title":"Comment","color":{"type":"Color","r":0.254801,"g":0.484375,"b":0.44133,"a":1},"text":"Blurs and inverts (Depth comes straight from blur)","size":{"x":371.854126,"y":364.207214}},{"name":"gaussian_blur_3","type":"gaussian_blur","parameters":{"param0":11,"param1":3,"param2":0},"node_position":{"x":-1880,"y":440}},{"name":"comment_7","type":"comment","parameters":{},"node_position":{"x":-1580,"y":-800},"title":"Comment","color":{"type":"Color","r":0.360026,"g":0.411458,"b":0,"a":1},"text":"Roughness","size":{"x":547.369019,"y":264.262512}},{"name":"2185","type":"remote","parameters":{"param0":{"type":"Color","r":0.054688,"g":1,"b":0,"a":1},"param1":1,"param5":0.02,"param6":3,"param7":0.65,"param8":0,"param9":1,"param10":0.65,"param2":4},"node_position":{"x":180,"y":-291.839996},"widgets":[{"label":"Crack glow color","linked_widgets":[{"node":"uniform","widget":"color"}],"name":"param0","type":"linked_control"},{"label":"Crack glow amount","linked_widgets":[{"node":"blend_4","widget":"amount"}],"name":"param1","type":"linked_control"},{"label":"Crack size","linked_widgets":[{"node":"tones_step","widget":"value"}],"name":"param5","type":"linked_control"},{"label":"Crack blur amount","linked_widgets":[{"node":"gaussian_blur","widget":"param1"},{"node":"gaussian_blur_3","widget":"param1"}],"name":"param6","type":"linked_control"},{"label":"Smoothness","linked_widgets":[{"node":"blend_3","widget":"amount"}],"name":"param7","type":"linked_control"},{"label":"Dust ","linked_widgets":[{"node":"blend_8","widget":"amount"}],"name":"param8","type":"linked_control"},{"label":"Crack Roughness","linked_widgets":[{"node":"uniform_greyscale","widget":"color"}],"name":"param9","type":"linked_control"},{"label":"Brick Roughness","linked_widgets":[{"node":"uniform_greyscale_2","widget":"color"}],"name":"param10","type":"linked_control"},{"name":"param2","label":"Brick Scale","type":"linked_control","linked_widgets":[{"node":"tex3d_fbm_4","widget":"scale_x"},{"node":"tex3d_fbm_4","widget":"scale_y"},{"node":"tex3d_fbm_4","widget":"scale_z"}]}]},{"name":"blend_4","type":"blend","parameters":{"blend_type":0,"amount":1},"node_position":{"x":-852.210327,"y":-377.403473}},{"name":"uniform_4","type":"uniform","parameters":{"color":{"type":"Color","r":0,"g":0,"b":0,"a":1}},"node_position":{"x":-1020,"y":-320}},{"name":"fbm_2","type":"fbm","parameters":{"noise":0,"scale_x":32,"scale_y":32,"folds":0,"iterations":8,"persistence":0.8},"node_position":{"x":-1780,"y":-1520}},{"name":"transform2_2","type":"transform2","parameters":{"translate_x":0,"translate_y":0,"rotate":0,"scale_x":32,"scale_y":1,"mode":2},"node_position":{"x":-1520,"y":-1520}},{"name":"blend_6","type":"blend","parameters":{"blend_type":2,"amount":0},"node_position":{"x":-1260,"y":-1520}},{"name":"blend_7","type":"blend","parameters":{"blend_type":3,"amount":1},"node_position":{"x":-1260,"y":-1180}},{"name":"uniform_5","type":"uniform","parameters":{"color":{"type":"Color","r":0,"g":0,"b":0,"a":1}},"node_position":{"x":-1440,"y":-1260}},{"name":"fbm_4","type":"fbm","parameters":{"noise":0,"scale_x":32,"scale_y":32,"folds":0,"iterations":10,"persistence":1},"node_position":{"x":-1540,"y":-1000}},{"name":"blend_8","type":"blend","parameters":{"blend_type":3,"amount":0},"node_position":{"x":-492.697723,"y":-1387.302246}},{"name":"comment_8","type":"comment","parameters":{},"node_position":{"x":-1800,"y":-1660},"title":"Comment","color":{"type":"Color","r":0.104818,"g":0.479167,"b":0,"a":1},"text":"Steel grain","size":{"x":763.67688,"y":357.362549}},{"name":"comment_9","type":"comment","parameters":{},"node_position":{"x":-1580,"y":-1280},"title":"Comment","color":{"type":"Color","r":1,"g":0,"b":0,"a":1},"text":"Dust\n","size":{"x":546.940613,"y":467.876587}},{"name":"graph_2","type":"graph","parameters":{},"node_position":{"x":-1240,"y":-122},"label":"Scratches","shortdesc":"","longdesc":"","nodes":[{"name":"gen_inputs","type":"ios","parameters":{},"node_position":{"x":-1700,"y":400},"ports":[{"name":"Inv UV Map","type":"rgb","group_size":0}]},{"name":"gen_outputs","type":"ios","parameters":{},"node_position":{"x":-300,"y":360},"ports":[{"group_size":0,"name":"Output","type":"rgba"}]},{"name":"gen_parameters","type":"remote","parameters":{},"node_position":{"x":-920,"y":-100},"widgets":[]},{"name":"tex3d_apply_invuvmap","type":"shader","parameters":{},"node_position":{"x":-980,"y":380},"shader_model":{"code":"","global":"","inputs":[{"default":"vec3(1.0)","label":"Texture","longdesc":"The input 3D texture","name":"t","shortdesc":"Texture","type":"tex3d"},{"default":"vec3(0.0)","label":"Inv. UV Map","longdesc":"The inverse UV map of the object","name":"map","shortdesc":"InvUVMap","type":"rgb"}],"instance":"","longdesc":"This node applies a 3D texture to an object using its inverse UV map.","name":"TEX3D Apply","outputs":[{"longdesc":"The generated texture","rgb":"$t(vec4($map($uv), 0.0))","shortdesc":"Output","type":"rgb"}],"parameters":[],"shortdesc":"TEX3D Apply"}},{"name":"tex3d_fbm_2","type":"shader","parameters":{"noise":4,"scale_x":4,"scale_y":4,"scale_z":4,"iterations":1,"persistence":1},"node_position":{"x":-1260,"y":140},"shader_model":{"name":"Improved TEX3D FBM","global":"float rand31(vec3 p) {\n\treturn fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123);\n}\nvec3 rand33(vec3 p){\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat tex3d_fbm_value(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec3 f = fract(coord);\n\tfloat p000 = rand31(mod(o, size));\n\tfloat p001 = rand31(mod(o + vec3(0.0, 0.0, 1.0), size));\n\tfloat p010 = rand31(mod(o + vec3(0.0, 1.0, 0.0), size));\n\tfloat p011 = rand31(mod(o + vec3(0.0, 1.0, 1.0), size));\n\tfloat p100 = rand31(mod(o + vec3(1.0, 0.0, 0.0), size));\n\tfloat p101 = rand31(mod(o + vec3(1.0, 0.0, 1.0), size));\n\tfloat p110 = rand31(mod(o + vec3(1.0, 1.0, 0.0), size));\n\tfloat p111 = rand31(mod(o + vec3(1.0, 1.0, 1.0), size));\n\tvec3 t = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat tex3d_fbm_perlin(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec3 f = fract(coord);\n\tvec3 v000 = normalize(rand33(mod(o, size))-vec3(0.5));\n\tvec3 v001 = normalize(rand33(mod(o + vec3(0.0, 0.0, 1.0), size))-vec3(0.5));\n\tvec3 v010 = normalize(rand33(mod(o + vec3(0.0, 1.0, 0.0), size))-vec3(0.5));\n\tvec3 v011 = normalize(rand33(mod(o + vec3(0.0, 1.0, 1.0), size))-vec3(0.5));\n\tvec3 v100 = normalize(rand33(mod(o + vec3(1.0, 0.0, 0.0), size))-vec3(0.5));\n\tvec3 v101 = normalize(rand33(mod(o + vec3(1.0, 0.0, 1.0), size))-vec3(0.5));\n\tvec3 v110 = normalize(rand33(mod(o + vec3(1.0, 1.0, 0.0), size))-vec3(0.5));\n\tvec3 v111 = normalize(rand33(mod(o + vec3(1.0, 1.0, 1.0), size))-vec3(0.5));\n\tfloat p000 = dot(v000, f);\n\tfloat p001 = dot(v001, f - vec3(0.0, 0.0, 1.0));\n\tfloat p010 = dot(v010, f - vec3(0.0, 1.0, 0.0));\n\tfloat p011 = dot(v011, f - vec3(0.0, 1.0, 1.0));\n\tfloat p100 = dot(v100, f - vec3(1.0, 0.0, 0.0));\n\tfloat p101 = dot(v101, f - vec3(1.0, 0.0, 1.0));\n\tfloat p110 = dot(v110, f - vec3(1.0, 1.0, 0.0));\n\tfloat p111 = dot(v111, f - vec3(1.0, 1.0, 1.0));\n\tvec3 t = f * f * (3.0 - 2.0 * f);\n\treturn 0.5 + mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat tex3d_fbm_cellular(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec3 f = fract(coord);\n\tfloat min_dist = 3.0;\n\tfor (float x = -1.0; x <= 1.0; x++) {\n\t\tfor (float y = -1.0; y <= 1.0; y++) {\n\t\t\tfor (float z = -1.0; z <= 1.0; z++) {\n\t\t\t\tvec3 node = 0.4*rand33(mod(o + vec3(x, y, z), size)) + vec3(x, y, z);\n\t\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y + (f - node).z * (f - node).z);\n\t\t\t\tmin_dist = min(min_dist, dist);\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat tex3d_fbm_distToEdge(vec3 coord, vec3 size, float seed) {\n\tvec3 point = floor(coord) + rand3(vec2(seed, 1.0 - seed)) + size;\n\tvec3 fraction = fract(coord);\n\t\n\tivec3 min_b;\n\tvec3 min_r;\n\t\n\tfloat min_dist = 8.0;\n\tfor (int x = -1; x <= 1; x++)\n\tfor (int y = -1; y <= 1; y++)\n\tfor (int z = -1; z <= 1; z++) \n\t{\n\t\tivec3 b = ivec3(x, y, z);\n\t\tvec3 r = vec3(b) + rand31(point + vec3(b)) - fraction;\n\t\tfloat distance = dot(r, r);\n\t\t\n\t\tif (distance < min_dist) \n\t\t{\n\t\t\tmin_dist = distance;\n\t\t\tmin_r = r;\n\t\t\tmin_b = b;\n\t\t}\n\t}\n\t\n\tmin_dist = 8.0;\n\tfor (int x = -1; x <= 1; x++)\n\tfor (int y = -1; y <= 1; y++)\n\tfor (int z = -1; z <= 1; z++) \n\t{\n\t\tivec3 b = min_b + ivec3(x, y, z);\n\t\tvec3 r = vec3(b) + rand31(point + vec3(b)) - fraction;\n\t\tfloat dist = dot(0.5 * (min_r + r), normalize(r - min_r));\n\t\t\n\t\tmin_dist = min(min_dist, dist);\n\t}\n\t\n\treturn min_dist;\n}\n\nvec3 tex3d_fbm_randColors(vec3 coord, vec3 size, float seed) {\n\tvec3 point = floor(coord) + rand3(vec2(seed, 1.0 - seed)) + size;\n\tvec3 fraction = fract(coord);\n\t\n\tivec3 min_b;\n\tvec3 min_r;\n\t\n\tfloat min_dist = 8.0;\n\tfor (int x = -1; x <= 1; x++)\n\tfor (int y = -1; y <= 1; y++)\n\tfor (int z = -1; z <= 1; z++) \n\t{\n\t\tivec3 b = ivec3(x, y, z);\n\t\tvec3 r = vec3(b) + rand31(point + vec3(b)) - fraction;\n\t\tfloat distance = dot(r, r);\n\t\t\n\t\tif (distance < min_dist) \n\t\t{\n\t\t\tmin_dist = distance;\n\t\t\tmin_r = r;\n\t\t\tmin_b = b;\n\t\t}\n\t}\n\t\n\treturn normalize(abs(rand33(mod(point + vec3(min_b), size))));\n}","instance":"vec3 $(name)_fbm(vec3 coord, vec3 size, int octaves, float persistence, float seed) {\n\tfloat normalize_factor = 0.0;\n\tvec3 value = vec3(0.0);\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += tex3d_fbm_$noise(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / vec3(normalize_factor);\n}\n","code":"","shortdesc":"Tex3D FBM","longdesc":"Generates a 3D noise made of several octaves of a simple noise","parameters":[{"values":[{"name":"Value","value":"value"},{"name":"Perlin","value":"perlin"},{"name":"Cellular","value":"cellular"},{"name":"Distance to Edge","value":"distToEdge"},{"name":"Random Colors","value":"randColors"}],"default":4,"name":"noise","label":"Noise","type":"enum","shortdesc":"Noise type","longdesc":"The simple noise type"},{"min":1,"max":32,"step":1,"default":4,"control":"None","name":"scale_x","label":"Scale X","type":"float","shortdesc":"Scale.x","longdesc":"The scale of the first octave along the X axis"},{"min":1,"max":32,"step":1,"default":4,"control":"None","name":"scale_y","label":"Scale Y","type":"float","shortdesc":"Scale.y","longdesc":"The scale of the first octave along the Y axis"},{"min":1,"max":32,"step":1,"default":4,"control":"None","name":"scale_z","label":"Scale Z","type":"float","shortdesc":"Scale.z","longdesc":"The scale of the first octave along the Z axis"},{"min":1,"max":10,"step":1,"default":3,"control":"None","name":"iterations","label":"Iterations","type":"float","shortdesc":"Octaves","longdesc":"The number of noise octaves"},{"min":0,"max":1,"step":0.05,"default":0.5,"control":"None","name":"persistence","label":"Persistence","type":"float","shortdesc":"Persistence","longdesc":"The persistence between two consecutive octaves"}],"inputs":[],"outputs":[{"tex3d":"vec3($(name)_fbm($(uv).xyz, vec3($(scale_x), $(scale_y), $(scale_z)), int($(iterations)), $(persistence), float($(seed))))","shortdesc":"Output","longdesc":"Shows a greyscale 3D texture of the generated noise","type":"tex3d"}]}},{"name":"tex3d_fbm_3","type":"shader","parameters":{"noise":0,"scale_x":32,"scale_y":32,"scale_z":24,"iterations":10,"persistence":0.5},"node_position":{"x":-1640,"y":-40},"shader_model":{"name":"Improved TEX3D FBM","global":"float rand31(vec3 p) {\n\treturn fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123);\n}\nvec3 rand33(vec3 p){\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat tex3d_fbm_value(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec3 f = fract(coord);\n\tfloat p000 = rand31(mod(o, size));\n\tfloat p001 = rand31(mod(o + vec3(0.0, 0.0, 1.0), size));\n\tfloat p010 = rand31(mod(o + vec3(0.0, 1.0, 0.0), size));\n\tfloat p011 = rand31(mod(o + vec3(0.0, 1.0, 1.0), size));\n\tfloat p100 = rand31(mod(o + vec3(1.0, 0.0, 0.0), size));\n\tfloat p101 = rand31(mod(o + vec3(1.0, 0.0, 1.0), size));\n\tfloat p110 = rand31(mod(o + vec3(1.0, 1.0, 0.0), size));\n\tfloat p111 = rand31(mod(o + vec3(1.0, 1.0, 1.0), size));\n\tvec3 t = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat tex3d_fbm_perlin(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec3 f = fract(coord);\n\tvec3 v000 = normalize(rand33(mod(o, size))-vec3(0.5));\n\tvec3 v001 = normalize(rand33(mod(o + vec3(0.0, 0.0, 1.0), size))-vec3(0.5));\n\tvec3 v010 = normalize(rand33(mod(o + vec3(0.0, 1.0, 0.0), size))-vec3(0.5));\n\tvec3 v011 = normalize(rand33(mod(o + vec3(0.0, 1.0, 1.0), size))-vec3(0.5));\n\tvec3 v100 = normalize(rand33(mod(o + vec3(1.0, 0.0, 0.0), size))-vec3(0.5));\n\tvec3 v101 = normalize(rand33(mod(o + vec3(1.0, 0.0, 1.0), size))-vec3(0.5));\n\tvec3 v110 = normalize(rand33(mod(o + vec3(1.0, 1.0, 0.0), size))-vec3(0.5));\n\tvec3 v111 = normalize(rand33(mod(o + vec3(1.0, 1.0, 1.0), size))-vec3(0.5));\n\tfloat p000 = dot(v000, f);\n\tfloat p001 = dot(v001, f - vec3(0.0, 0.0, 1.0));\n\tfloat p010 = dot(v010, f - vec3(0.0, 1.0, 0.0));\n\tfloat p011 = dot(v011, f - vec3(0.0, 1.0, 1.0));\n\tfloat p100 = dot(v100, f - vec3(1.0, 0.0, 0.0));\n\tfloat p101 = dot(v101, f - vec3(1.0, 0.0, 1.0));\n\tfloat p110 = dot(v110, f - vec3(1.0, 1.0, 0.0));\n\tfloat p111 = dot(v111, f - vec3(1.0, 1.0, 1.0));\n\tvec3 t = f * f * (3.0 - 2.0 * f);\n\treturn 0.5 + mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat tex3d_fbm_cellular(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec3 f = fract(coord);\n\tfloat min_dist = 3.0;\n\tfor (float x = -1.0; x <= 1.0; x++) {\n\t\tfor (float y = -1.0; y <= 1.0; y++) {\n\t\t\tfor (float z = -1.0; z <= 1.0; z++) {\n\t\t\t\tvec3 node = 0.4*rand33(mod(o + vec3(x, y, z), size)) + vec3(x, y, z);\n\t\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y + (f - node).z * (f - node).z);\n\t\t\t\tmin_dist = min(min_dist, dist);\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat tex3d_fbm_distToEdge(vec3 coord, vec3 size, float seed) {\n\tvec3 point = floor(coord) + rand3(vec2(seed, 1.0 - seed)) + size;\n\tvec3 fraction = fract(coord);\n\t\n\tivec3 min_b;\n\tvec3 min_r;\n\t\n\tfloat min_dist = 8.0;\n\tfor (int x = -1; x <= 1; x++)\n\tfor (int y = -1; y <= 1; y++)\n\tfor (int z = -1; z <= 1; z++) \n\t{\n\t\tivec3 b = ivec3(x, y, z);\n\t\tvec3 r = vec3(b) + rand31(point + vec3(b)) - fraction;\n\t\tfloat distance = dot(r, r);\n\t\t\n\t\tif (distance < min_dist) \n\t\t{\n\t\t\tmin_dist = distance;\n\t\t\tmin_r = r;\n\t\t\tmin_b = b;\n\t\t}\n\t}\n\t\n\tmin_dist = 8.0;\n\tfor (int x = -1; x <= 1; x++)\n\tfor (int y = -1; y <= 1; y++)\n\tfor (int z = -1; z <= 1; z++) \n\t{\n\t\tivec3 b = min_b + ivec3(x, y, z);\n\t\tvec3 r = vec3(b) + rand31(point + vec3(b)) - fraction;\n\t\tfloat dist = dot(0.5 * (min_r + r), normalize(r - min_r));\n\t\t\n\t\tmin_dist = min(min_dist, dist);\n\t}\n\t\n\treturn min_dist;\n}\n\nvec3 tex3d_fbm_randColors(vec3 coord, vec3 size, float seed) {\n\tvec3 point = floor(coord) + rand3(vec2(seed, 1.0 - seed)) + size;\n\tvec3 fraction = fract(coord);\n\t\n\tivec3 min_b;\n\tvec3 min_r;\n\t\n\tfloat min_dist = 8.0;\n\tfor (int x = -1; x <= 1; x++)\n\tfor (int y = -1; y <= 1; y++)\n\tfor (int z = -1; z <= 1; z++) \n\t{\n\t\tivec3 b = ivec3(x, y, z);\n\t\tvec3 r = vec3(b) + rand31(point + vec3(b)) - fraction;\n\t\tfloat distance = dot(r, r);\n\t\t\n\t\tif (distance < min_dist) \n\t\t{\n\t\t\tmin_dist = distance;\n\t\t\tmin_r = r;\n\t\t\tmin_b = b;\n\t\t}\n\t}\n\t\n\treturn normalize(abs(rand33(mod(point + vec3(min_b), size))));\n}","instance":"vec3 $(name)_fbm(vec3 coord, vec3 size, int octaves, float persistence, float seed) {\n\tfloat normalize_factor = 0.0;\n\tvec3 value = vec3(0.0);\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += tex3d_fbm_$noise(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / vec3(normalize_factor);\n}\n","code":"","shortdesc":"Tex3D FBM","longdesc":"Generates a 3D noise made of several octaves of a simple noise","parameters":[{"values":[{"name":"Value","value":"value"},{"name":"Perlin","value":"perlin"},{"name":"Cellular","value":"cellular"},{"name":"Distance to Edge","value":"distToEdge"},{"name":"Random Colors","value":"randColors"}],"default":4,"name":"noise","label":"Noise","type":"enum","shortdesc":"Noise type","longdesc":"The simple noise type"},{"min":1,"max":32,"step":1,"default":4,"control":"None","name":"scale_x","label":"Scale X","type":"float","shortdesc":"Scale.x","longdesc":"The scale of the first octave along the X axis"},{"min":1,"max":32,"step":1,"default":4,"control":"None","name":"scale_y","label":"Scale Y","type":"float","shortdesc":"Scale.y","longdesc":"The scale of the first octave along the Y axis"},{"min":1,"max":32,"step":1,"default":4,"control":"None","name":"scale_z","label":"Scale Z","type":"float","shortdesc":"Scale.z","longdesc":"The scale of the first octave along the Z axis"},{"min":1,"max":10,"step":1,"default":3,"control":"None","name":"iterations","label":"Iterations","type":"float","shortdesc":"Octaves","longdesc":"The number of noise octaves"},{"min":0,"max":1,"step":0.05,"default":0.5,"control":"None","name":"persistence","label":"Persistence","type":"float","shortdesc":"Persistence","longdesc":"The persistence between two consecutive octaves"}],"inputs":[],"outputs":[{"tex3d":"vec3($(name)_fbm($(uv).xyz, vec3($(scale_x), $(scale_y), $(scale_z)), int($(iterations)), $(persistence), float($(seed))))","shortdesc":"Output","longdesc":"Shows a greyscale 3D texture of the generated noise","type":"tex3d"}]}},{"name":"tones_step","type":"tones_step","parameters":{"value":0.75,"width":0,"invert":false},"node_position":{"x":-540,"y":360}},{"name":"tex3d_rotate_2","type":"shader","parameters":{"ax":180,"ay":180,"az":180},"node_position":{"x":-1000,"y":0},"shader_model":{"name":"TEX3D Rotate","global":"vec3 tex3d_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n","instance":"","code":"","shortdesc":"Tex3D Rotate","longdesc":"Rotates a 3D texture","parameters":[{"min":-180,"max":180,"step":1,"default":0,"control":"None","name":"ax","label":"X","type":"float","shortdesc":"Rotate.x","longdesc":"The rotation around the X axis"},{"min":-180,"max":180,"step":1,"default":0,"control":"None","name":"ay","label":"Y","type":"float","shortdesc":"Rotate.y","longdesc":"The rotation around the Y axis"},{"min":-180,"max":180,"step":1,"default":0,"control":"None","name":"az","label":"Z","type":"float","shortdesc":"Rotate.z","longdesc":"The rotation around the Z axis"}],"inputs":[{"name":"in","label":"","default":"vec3(1.0)","type":"tex3d","shortdesc":"Input","longdesc":"The input 3D texture"},{"name":"r","label":"","default":"vec3(1.0)","type":"tex3d","shortdesc":"Rotation","longdesc":"The texture to rotate the input by"}],"outputs":[{"tex3d":"$in(vec4(tex3d_rotate($uv.xyz, -vec3($ax * $r($uv.xyz).x, $ay * $r($uv.xyz).y, $az * $r($uv.xyz).z)*0.01745329251), $uv.w))","shortdesc":"Output","longdesc":"The rotated 3D texture","type":"tex3d"}]}},{"name":"tex3d_rotate_3","type":"shader","parameters":{"ax":180,"ay":180,"az":1},"node_position":{"x":-1180,"y":0},"shader_model":{"name":"TEX3D Scale","global":"vec3 tex3d_scale(vec3 pos, vec3 scale) {\n\tvec3 result = pos / scale;\n\treturn result;\n}","instance":"","code":"","shortdesc":"Tex3D Rotate","longdesc":"Rotates a 3D texture","parameters":[{"min":-180,"max":180,"step":1,"default":1,"control":"None","name":"ax","label":"X","type":"float","shortdesc":"Rotate.x","longdesc":"The rotation around the X axis"},{"min":-180,"max":180,"step":1,"default":1,"control":"None","name":"ay","label":"Y","type":"float","shortdesc":"Rotate.y","longdesc":"The rotation around the Y axis"},{"min":-180,"max":180,"step":1,"default":1,"control":"None","name":"az","label":"Z","type":"float","shortdesc":"Rotate.z","longdesc":"The rotation around the Z axis"}],"inputs":[{"name":"in","label":"","default":"vec3(1.0)","type":"tex3d","shortdesc":"Input","longdesc":"The input 3D texture"},{"name":"s","label":"","default":"vec3(1.0)","type":"tex3d","shortdesc":"Scale","longdesc":"The texture to scale the input by"}],"outputs":[{"tex3d":"$in(vec4(tex3d_scale($uv.xyz, -vec3($ax * $s($uv.xyz).x, $ay * $s($uv.xyz).y, $az * $s($uv.xyz).z)), $uv.w))","shortdesc":"Output","longdesc":"The rotated 3D texture","type":"tex3d"}]}},{"name":"tex3d_from2d","type":"tex3d_from2d","parameters":{},"node_position":{"x":-1580,"y":140}},{"name":"uniform","type":"uniform","parameters":{"color":{"type":"Color","r":0,"g":0,"b":0,"a":1}},"node_position":{"x":-1739.781128,"y":152.335419}},{"name":"tex3d_colorize_3","type":"tex3d_colorize","parameters":{"g":{"type":"Gradient","points":[{"pos":0.195082,"r":0,"g":0,"b":0,"a":1},{"pos":0.291775,"r":1,"g":1,"b":1,"a":1}],"interpolation":3}},"node_position":{"x":-1380,"y":20}}],"connections":[{"from":"tones_step","from_port":0,"to":"gen_outputs","to_port":0},{"from":"tex3d_fbm_2","from_port":0,"to":"tex3d_rotate_2","to_port":1},{"from":"tex3d_rotate_3","from_port":0,"to":"tex3d_rotate_2","to_port":0},{"from":"tex3d_rotate_2","from_port":0,"to":"tex3d_apply_invuvmap","to_port":0},{"from":"gen_inputs","from_port":0,"to":"tex3d_apply_invuvmap","to_port":1},{"from":"tex3d_apply_invuvmap","from_port":0,"to":"tones_step","to_port":0},{"from":"uniform","from_port":0,"to":"tex3d_from2d","to_port":0},{"from":"tex3d_colorize_3","from_port":0,"to":"tex3d_rotate_3","to_port":0},{"from":"tex3d_fbm_3","from_port":0,"to":"tex3d_colorize_3","to_port":0}]},{"name":"blend_5","type":"blend","parameters":{"blend_type":2,"amount":1},"node_position":{"x":-1040,"y":-120}},{"name":"comment_2","type":"comment","parameters":{},"node_position":{"x":-1280,"y":-200},"title":"Comment","color":{"type":"Color","r":0.817708,"g":1,"b":0.583333,"a":1},"text":"Normals w/ scratches","size":{"x":727.631348,"y":265.33667}},{"name":"graph","type":"graph","parameters":{"param0":3,"param1":3,"param2":3,"param3":0.5,"param4":0.5,"param5":0.5},"node_position":{"x":-1540,"y":-1180},"label":"Warp1","shortdesc":"","longdesc":"","nodes":[{"name":"transform","type":"transform","parameters":{"translate_x":0.5,"translate_y":0.5,"rotate":0,"scale_x":1,"scale_y":1,"repeat":true},"node_position":{"x":-259.25,"y":-658}},{"name":"perlin","type":"perlin","parameters":{"scale_x":3,"scale_y":3,"iterations":3,"persistence":0.5},"node_position":{"x":-502.25,"y":-653}},{"name":"gen_inputs","type":"ios","parameters":{},"node_position":{"x":-670.25,"y":-647.5},"ports":[]},{"name":"gen_outputs","type":"ios","parameters":{},"node_position":{"x":18.75,"y":-657.5},"ports":[{"name":"port0","type":"rgba"}]},{"name":"gen_parameters","type":"remote","parameters":{"param0":3,"param1":3,"param2":3,"param3":0.5,"param4":0.5,"param5":0.5},"node_position":{"x":-315.75,"y":-893},"widgets":[{"label":"Scale X","linked_widgets":[{"node":"perlin","widget":"scale_x"}],"name":"param0","type":"linked_control"},{"label":"Scale Y","linked_widgets":[{"node":"perlin","widget":"scale_y"}],"name":"param1","type":"linked_control"},{"label":"Iterations","linked_widgets":[{"node":"perlin","widget":"iterations"}],"name":"param2","type":"linked_control"},{"label":"Persistance","linked_widgets":[{"node":"perlin","widget":"persistence"}],"name":"param3","type":"linked_control"},{"label":"Warp X","linked_widgets":[{"node":"transform","widget":"translate_x"}],"name":"param4","type":"linked_control"},{"label":"Warp Y","linked_widgets":[{"node":"transform","widget":"translate_y"}],"name":"param5","type":"linked_control"}]}],"connections":[{"from":"perlin","from_port":0,"to":"transform","to_port":1},{"from":"perlin","from_port":0,"to":"transform","to_port":2},{"from":"perlin","from_port":0,"to":"transform","to_port":0},{"from":"transform","from_port":0,"to":"gen_outputs","to_port":0}]},{"name":"uniform_greyscale","type":"uniform_greyscale","parameters":{"color":1},"node_position":{"x":-1560,"y":-740}},{"name":"uniform_greyscale_2","type":"uniform_greyscale","parameters":{"color":0.65},"node_position":{"x":-1560,"y":-680}},{"name":"transform2","type":"transform2","parameters":{"translate_x":0,"translate_y":0,"rotate":0,"scale_x":1,"scale_y":1,"mode":0},"node_position":{"x":-2580,"y":-40}},{"name":"tex3d_fbm_4","type":"shader","parameters":{"noise":3,"scale_x":4,"scale_y":4,"scale_z":4,"iterations":1,"persistence":1},"node_position":{"x":-3020,"y":-60},"shader_model":{"name":"TEX3D FBM","global":"float rand31(vec3 p) {\n\treturn fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123);\n}\nvec3 rand33(vec3 p){\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat tex3d_fbm_value(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec3 f = fract(coord);\n\tfloat p000 = rand31(mod(o, size));\n\tfloat p001 = rand31(mod(o + vec3(0.0, 0.0, 1.0), size));\n\tfloat p010 = rand31(mod(o + vec3(0.0, 1.0, 0.0), size));\n\tfloat p011 = rand31(mod(o + vec3(0.0, 1.0, 1.0), size));\n\tfloat p100 = rand31(mod(o + vec3(1.0, 0.0, 0.0), size));\n\tfloat p101 = rand31(mod(o + vec3(1.0, 0.0, 1.0), size));\n\tfloat p110 = rand31(mod(o + vec3(1.0, 1.0, 0.0), size));\n\tfloat p111 = rand31(mod(o + vec3(1.0, 1.0, 1.0), size));\n\tvec3 t = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat tex3d_fbm_perlin(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec3 f = fract(coord);\n\tvec3 v000 = normalize(rand33(mod(o, size))-vec3(0.5));\n\tvec3 v001 = normalize(rand33(mod(o + vec3(0.0, 0.0, 1.0), size))-vec3(0.5));\n\tvec3 v010 = normalize(rand33(mod(o + vec3(0.0, 1.0, 0.0), size))-vec3(0.5));\n\tvec3 v011 = normalize(rand33(mod(o + vec3(0.0, 1.0, 1.0), size))-vec3(0.5));\n\tvec3 v100 = normalize(rand33(mod(o + vec3(1.0, 0.0, 0.0), size))-vec3(0.5));\n\tvec3 v101 = normalize(rand33(mod(o + vec3(1.0, 0.0, 1.0), size))-vec3(0.5));\n\tvec3 v110 = normalize(rand33(mod(o + vec3(1.0, 1.0, 0.0), size))-vec3(0.5));\n\tvec3 v111 = normalize(rand33(mod(o + vec3(1.0, 1.0, 1.0), size))-vec3(0.5));\n\tfloat p000 = dot(v000, f);\n\tfloat p001 = dot(v001, f - vec3(0.0, 0.0, 1.0));\n\tfloat p010 = dot(v010, f - vec3(0.0, 1.0, 0.0));\n\tfloat p011 = dot(v011, f - vec3(0.0, 1.0, 1.0));\n\tfloat p100 = dot(v100, f - vec3(1.0, 0.0, 0.0));\n\tfloat p101 = dot(v101, f - vec3(1.0, 0.0, 1.0));\n\tfloat p110 = dot(v110, f - vec3(1.0, 1.0, 0.0));\n\tfloat p111 = dot(v111, f - vec3(1.0, 1.0, 1.0));\n\tvec3 t = f * f * (3.0 - 2.0 * f);\n\treturn 0.5 + mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat tex3d_fbm_cellular(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec3 f = fract(coord);\n\tfloat min_dist = 3.0;\n\tfor (float x = -1.0; x <= 1.0; x++) {\n\t\tfor (float y = -1.0; y <= 1.0; y++) {\n\t\t\tfor (float z = -1.0; z <= 1.0; z++) {\n\t\t\t\tvec3 node = 0.4*rand33(mod(o + vec3(x, y, z), size)) + vec3(x, y, z);\n\t\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y + (f - node).z * (f - node).z);\n\t\t\t\tmin_dist = min(min_dist, dist);\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat tex3d_fbm_distToEdge(vec3 coord, vec3 size, float seed) {\n\t//vec3 o = floor(coord)+rand3(vec2(float(seed), 1.0-float(seed)))+size;\n\t//vec3 f = fract(coord);\n\t//float min_dist = 3.0;\n\t//for (float x = -1.0; x <= 1.0; x++) {\n\t//\tfor (float y = -1.0; y <= 1.0; y++) {\n\t//\t\tfor (float z = -1.0; z <= 1.0; z++) {\n\t//\t\t\tvec3 node = 0.4*rand33(mod(o + vec3(x, y, z), size)) + vec3(x, y, z);\n\t//\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y + (f - node).z * (f - node).z);\n\t//\t\t\tmin_dist = min(min_dist, dist);\n\t//\t\t}\n\t//\t}\n\t//}\n\t//return min_dist;\n\t\n\tvec3 point = floor(coord);\n\tvec3 fraction = fract(coord);\n\t\n\tivec3 min_b;\n\tvec3 min_r;\n\t\n\tfloat min_dist = 8.0;\n\tfor (int x = -1; x <= 1; x++)\n\tfor (int y = -1; y <= 1; y++)\n\tfor (int z = -1; z <= 1; z++) \n\t{\n\t\tivec3 b = ivec3(x, y, z);\n\t//\tvec3 r = vec3(b) + rand3(point + b) - fraction;\n\t\tvec3 r = vec3(b) + rand31(point + vec3(b)) - fraction;\n\t\tfloat distance = dot(r, r);\n\t//\t\n\t\tif (distance < min_dist) \n\t\t{\n\t\t\tmin_dist = distance;\n\t\t\tmin_r = r;\n\t\t\tmin_b = b;\n\t\t}\n\t}\n\t\n\tmin_dist = 8.0;\n\tfor (int x = -1; x <= 1; x++)\n\tfor (int y = -1; y <= 1; y++)\n\tfor (int z = -1; z <= 1; z++) \n\t{\n\t\tivec3 b = min_b + ivec3(x, y, z);\n\t\tvec3 r = vec3(b) + rand31(point + vec3(b)) - fraction;\n\t\tfloat dist = dot(0.5 * (min_r + r), normalize(r - min_r));\n\t\t\n\t\tmin_dist = min(min_dist, dist);\n\t}\n\t\n\treturn min_dist;\n}\n","instance":"float $(name)_fbm(vec3 coord, vec3 size, int octaves, float persistence, float seed) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += tex3d_fbm_$noise(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n","code":"","shortdesc":"Tex3D FBM","longdesc":"Generates a 3D noise made of several octaves of a simple noise","parameters":[{"values":[{"name":"Value","value":"value"},{"name":"Perlin","value":"perlin"},{"name":"Cellular","value":"cellular"},{"name":"DistToEdge","value":"distToEdge"}],"default":3,"name":"noise","label":"Noise","type":"enum","shortdesc":"Noise type","longdesc":"The simple noise type"},{"min":1,"max":32,"step":1,"default":4,"control":"None","name":"scale_x","label":"Scale X","type":"float","shortdesc":"Scale.x","longdesc":"The scale of the first octave along the X axis"},{"min":1,"max":32,"step":1,"default":4,"control":"None","name":"scale_y","label":"Scale Y","type":"float","shortdesc":"Scale.y","longdesc":"The scale of the first octave along the Y axis"},{"min":1,"max":32,"step":1,"default":4,"control":"None","name":"scale_z","label":"Scale Z","type":"float","shortdesc":"Scale.z","longdesc":"The scale of the first octave along the Z axis"},{"min":1,"max":10,"step":1,"default":3,"control":"None","name":"iterations","label":"Iterations","type":"float","shortdesc":"Octaves","longdesc":"The number of noise octaves"},{"min":0,"max":1,"step":0.05,"default":0.5,"control":"None","name":"persistence","label":"Persistence","type":"float","shortdesc":"Persistence","longdesc":"The persistence between two consecutive octaves"}],"inputs":[],"outputs":[{"tex3d":"vec3($(name)_fbm($(uv).xyz, vec3($(scale_x), $(scale_y), $(scale_z)), int($(iterations)), $(persistence), float($(seed))))","shortdesc":"Output","longdesc":"Shows a greyscale 3D texture of the generated noise","type":"tex3d"}]}},{"name":"tex3d_apply_invuvmap","type":"shader","parameters":{},"node_position":{"x":-2760,"y":-60},"shader_model":{"code":"","global":"","inputs":[{"default":"vec3(1.0)","label":"Texture","longdesc":"The input 3D texture","name":"t","shortdesc":"Texture","type":"tex3d"},{"default":"vec3(0.0)","label":"Inv. UV Map","longdesc":"The inverse UV map of the object","name":"map","shortdesc":"InvUVMap","type":"rgb"}],"instance":"","longdesc":"This node applies a 3D texture to an object using its inverse UV map.","name":"TEX3D Apply","outputs":[{"longdesc":"The generated texture","rgb":"$t(vec4($map($uv), 0.0))","shortdesc":"Output","type":"rgb"}],"parameters":[],"shortdesc":"TEX3D Apply"}},{"name":"image","type":"image","parameters":{"image":"C:/Users/elect/Desktop/invUVCube.png"},"node_position":{"x":-2760,"y":60}}],"connections":[{"from":"tones_step","from_port":0,"to":"gaussian_blur","to_port":0},{"from":"invert","from_port":0,"to":"occlusion","to_port":0},{"from":"gaussian_blur_2","from_port":0,"to":"blend_2","to_port":0},{"from":"invert","from_port":0,"to":"gaussian_blur_3","to_port":0},{"from":"gaussian_blur","from_port":0,"to":"blend","to_port":1},{"from":"uniform","from_port":0,"to":"blend","to_port":0},{"from":"blend","from_port":0,"to":"blend_4","to_port":0},{"from":"uniform_4","from_port":0,"to":"blend_4","to_port":1},{"from":"blend_4","from_port":0,"to":"gaussian_blur_2","to_port":0},{"from":"tones_step","from_port":0,"to":"invert","to_port":0},{"from":"fbm_2","from_port":0,"to":"transform2_2","to_port":0},{"from":"blend_6","from_port":0,"to":"blend_2","to_port":1},{"from":"transform2_2","from_port":0,"to":"blend_6","to_port":0},{"from":"uniform_2","from_port":0,"to":"blend_6","to_port":1},{"from":"fbm_4","from_port":0,"to":"blend_7","to_port":2},{"from":"blend_7","from_port":0,"to":"blend_8","to_port":0},{"from":"blend_2","from_port":0,"to":"blend_8","to_port":1},{"from":"gaussian_blur_3","from_port":0,"to":"blend_5","to_port":1},{"from":"blend_5","from_port":0,"to":"normal_map","to_port":0},{"from":"uniform_5","from_port":0,"to":"blend_7","to_port":1},{"from":"graph","from_port":0,"to":"blend_7","to_port":0},{"from":"uniform_greyscale","from_port":0,"to":"blend_3","to_port":0},{"from":"uniform_greyscale_2","from_port":0,"to":"blend_3","to_port":1},{"from":"gaussian_blur","from_port":0,"to":"blend_3","to_port":2},{"from":"tex3d_fbm_4","from_port":0,"to":"tex3d_apply_invuvmap","to_port":0},{"from":"transform2","from_port":0,"to":"tones_step","to_port":0},{"from":"tex3d_apply_invuvmap","from_port":0,"to":"transform2","to_port":0},{"from":"normal_map","from_port":0,"to":"Material","to_port":4},{"from":"blend_3","from_port":0,"to":"Material","to_port":2},{"from":"occlusion","from_port":0,"to":"Material","to_port":5},{"from":"gaussian_blur","from_port":0,"to":"Material","to_port":6},{"from":"blend_4","from_port":0,"to":"Material","to_port":3},{"from":"uniform","from_port":0,"to":"Material","to_port":8},{"from":"blend_8","from_port":0,"to":"Material","to_port":0},{"from":"image","from_port":0,"to":"tex3d_apply_invuvmap","to_port":1}]}